"use client";

import { PropsWithChildren, ReactNode, useRef } from "react";

import {
  Html,
  Environment,
  useGLTF,
  ContactShadows,
  OrbitControls,
} from "@react-three/drei";
import { ThreeElements, useFrame } from "@react-three/fiber";
import { Group, Object3DEventMap, MathUtils } from "three";

export default function CardModel(props: {
  front: ReactNode;
  back: ReactNode;
}) {
  const group = useRef<Group<Object3DEventMap>>(new Group());
  // Load model
  // Make it float
  useFrame((state) => {
    const t = state.clock.getElapsedTime();

    group.current.rotation.x = MathUtils.lerp(
      group.current.rotation.x,
      Math.cos(t / 2) / 20 + 0.25,
      0.1
    );
    group.current.rotation.y = MathUtils.lerp(
      group.current.rotation.y,
      Math.sin(t / 4) / 20,
      0.1
    );
    group.current.rotation.z = MathUtils.lerp(
      group.current.rotation.z,
      Math.sin(t / 8) / 20,
      0.1
    );
    group.current.position.y = MathUtils.lerp(
      group.current.position.y,
      (-2 + Math.sin(t / 2)) / 2,
      0.1
    );
  });
  // The jsx graph was auto-generated by: https://github.com/pmndrs/gltfjsx
  return (
    <group ref={group} {...props} dispose={null}>
      <group rotation-x={-0.425}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <mesh position={[0, 0, 0]} scale={[1, 1, 1]}>
            <Html
              className="w-[160px] h-[100px] bg-zinc-900 text-white border border-gray-700 rounded-sm"
              rotation-x={-Math.PI / 2}
              transform
              occlude={"blending"}
            >
              <div
                className="wrapper w-full h-full p-4"
                onPointerDown={(e) => e.stopPropagation()}
              >
                {props.front}
              </div>
            </Html>
          </mesh>
          <mesh position={[0, -0.05, 0]} scale={[-1, 1, -1]}>
            <Html
              className="w-[160px] h-[100px] bg-zinc-900 text-white border border-gray-700 rounded-sm"
              rotation-x={Math.PI / 2}
              transform
              occlude={"blending"}
            >
              <div
                className="wrapper w-full h-full p-4"
                onPointerDown={(e) => e.stopPropagation()}
              >
                {props.back}
              </div>
            </Html>
          </mesh>
          <mesh position={[0, -0.03, 0]} scale={[4, -0.03, 2.5]}>
            <meshBasicMaterial color={"black"} />
            <boxGeometry />
          </mesh>
        </group>
      </group>
    </group>
  );
}
